CREATE DEFINER=`alec_f`@`%` PROCEDURE `acwh_parts_data_load`(IN createdBy varchar(50))
begin

    /*
    INSERT ALL RECORDS FROM ALEC_TEMP INTO XREF_MATERIALS
    UPDATE ALEC_TEMP WITH NEW_XM_OID
    INSERT INTO FACT_MEASURE USING NEW_XM_OID & EXISTING QUANTITY ON ALEC_TEMP
    SET MEASURE = 0 ON FACT_MEASURE RECORDS WITH OLD_XM_OID
    */

    DECLARE minId INT;
    DECLARE maxId INT;
    DECLARE inc INT;


    INSERT INTO XREF_MATERIALS (MM_OID, `STATUS`, LOCATION, DEPARTMENT, RECEIVED_DATE, CREATED_BY,
                                CREATED_TIMESTAMP, VERSION, WAREHOUSE, MATERIAL_NUMBER)
    SELECT t.MM_OID,
		   2902,
           t.BIN_ID,
           104,
           CURDATE(),
           createdBy,
           NOW(),
           0,
           1001,
           t.MATERIAL_NUMBER
    FROM BASIL_SBX_PRD.ALEC_TEMP t;

    -- Get the range of IDs
    SET minId = LAST_INSERT_ID();
    SET maxId = minId + ROW_COUNT() - 1;
    SET inc = minId;

    -- Fetch the period code
    SELECT PERIOD_CODE INTO @periodCode FROM XREF_PERIOD WHERE CURR_DATE = CURDATE() LIMIT 1;

	UPDATE BASIL_SBX_PRD.ALEC_TEMP2
    set NEW_XM_OID = rn - 1 + minId;

    -- Bulk insert into FACT_MEASURE with MEASURE_OID 11
#     INSERT INTO FACT_MEASURE (PERIOD_CODE, XM_OID, MATERIAL_NUMBER, MEASURE_OID, MEASURE)
#     SELECT @periodCode, XM_OID, MATERIAL_NUMBER, 11, 1
#     FROM XREF_MATERIALS
#     WHERE XM_OID BETWEEN minId AND maxId;

    -- Bulk insert into FACT_MEASURE with MEASURE_OID 12
    INSERT INTO FACT_MEASURE (PERIOD_CODE, XM_OID, MM_OID, MEASURE_OID, MEASURE, VERSION, MATERIAL_NUMBER)
    SELECT @periodCode, NEW_XM_OID, MM_OID, 15 AS MEASURE_OID, QUANTITY AS MEASURE, 0 AS VERSION, MATERIAL_NUMBER
    FROM BASIL_SBX_PRD.ALEC_TEMP2;

    UPDATE BASIL_ODS_PRD.FACT_MEASURE A
    JOIN BASIL_SBX_PRD.ALEC_TEMP2 B
    ON A.XM_OID = B.OLD_XM_OID
    SET A.MEASURE = 0
    WHERE A.FM_OID <> 0 AND A.MEASURE_OID = 1;
end
